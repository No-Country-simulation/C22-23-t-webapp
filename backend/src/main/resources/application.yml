spring:
  application:
    name: backend
  jpa:
    hibernate:
      ddl-auto: none
    open-in-view: false
  servlet:
    multipart:
      max-file-size: 3MB
      max-request-size: 3MB
      enabled: true
  profiles:
    active: ${SPRING_PROFILES_ACTIVE}

## Application Configuration
app:
  seeding:
    enabled: true
    batch-size: 50
    pets:
      count: 1000
  error:
    base-uri: https://api.segundas-huellas.com/errors/
  default:
    pet-photo: ${DEFAULT_PET_PHOTO:}
  cloudinary:
    url: ${CLOUDINARY_URL:}
  security:
    cors:
      allowed-origins:
        - ${CORS_ALLOWED_ORIGINS}
    token:
      cleanup-cron: "0 0 2 * * *"
      retention-days: 7
    jwt:
      secret-key: ${JWT_SECRET_KEY}
      expiration: ${JWT_TOKEN_EXPIRATION}
      refresh-token:
        expiration: ${JWT_REFRESH_TOKEN_EXPIRATION}


## Dev only configuration
---
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    url: jdbc:postgresql://localhost:5432/segundas-huellas  # Conexión a la base de datos en Docker (localhost)
    username: admin
    password: admin
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        generate_statistics: true
        order_inserts: true
        order_updates: true

logging:
  level:
    org.hibernate.stat: ERROR
    org.hibernate.engine.internal.StatisticalLoggingSessionEventListener: ERROR
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    com.SegundasHuellas.backend: DEBUG


## Docker configuration
---
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: jdbc:postgresql://postgres:5432/segundas-huellas  # Conexión a la base de datos dentro de la red de Docker
    username: admin
    password: admin
  jpa:
    hibernate:
      ddl-auto: update
  app:
    cloudinary:
      url: cloudinary://367656173992544:ErIitGo4UksnWrB3K2W9LcSBoFA@dffbmjmgj
    default:
      pet-photo: https://res.cloudinary.com/dgdxraapm/image/upload/v1732583288/pet-photos/default.jpg


## Docker Compose Configuration (aplica a todos los perfiles)
---
spring:
  docker:
    compose:
      lifecycle-management: start_only
      file: ./backend/compose.yaml